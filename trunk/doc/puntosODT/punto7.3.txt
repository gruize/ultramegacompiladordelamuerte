Programa → Decs & Is


Declaraciones → Declaracion DeclaracionesRec
	
	Declaracion.etqh = Declaraciones.etqh
	Declaracion.dirh = Declaraciones.dir	
	Declaracion.nh = Declaraciones.nh
	DeclaracionesRec.nh = Declaraciones.nh
	DeclaracionesRec.tsh  = inserta(Declaraciones.tsh,Declaracion.id, Declaracion.props)
	DeclaracionesRec.dirh = Declaracion.dir
	DeclaracionesRec.etqh = Declaracion.etq
	
	Declaraciones.n = max(Declaracion.n, DeclaracionesRec.n)
	Declaraciones.dir = Declaracion.tam + DeclaracionesRec.dir	
	Declaraciones.etq = DeclaracionesRec.etq
	Declaraciones.ts = DeclaracionesRec.ts
	Declaraciones.cod = Declaracion.cod || DeclaracionesRec.cod

DeclaracionesRec → ';' Declaracion DeclaracionesRec
	Declaracion.nh = DeclaracionesRec0.nh
	Declaracion.etqh = DeclaracionesRec0.etqh
	DeclaracionesRec1.etqh = Declaracion.etq
	DeclaracionesRec1.dirh = Declaracion.dir
	DeclaracionesRec1.tsh = inserta(DeclaracionesRec0.tsh, Declaracion.id, Declaracion.props)	

	DeclaracionesRec0.n = max (Declaracion.n, DeclaracionesRec.n)
	DeclaracionesRec0.etq = DeclaracionesRec1.etq
	DeclaracionesRec0.dir = DeclaracionesRec1.dir + Declaracion.tam
	DeclaracionesRec0.cod = Declaracion.cod || DeclaracionesRec1.cod
	DeclaracionesRec0.ts = DeclaracionesRec1.ts
DeclaracionesRec → λ
	DeclaracionesRec.n = DeclaracionesRec.nh
	DeclaracionesRec.etq = DeclaracionesRec.etqh
	DeclaracionesRec.dir = DeclaracionesRec.dirh
	DeclaracionesRec.ts = DeclaracionesRec.tsh
	DeclaracionesRec.cod = {}


Dec → DecTipo
Dec → DecVar
Dec → DecProc
Tipo → Boolean
Tipo → Character
Tipo → Float
Tipo → Natural
Tipo → Integer
Tipo → iden
Tipo → array [num] of Tipo
Tipo → ^Tipo
Tipo → reg Campos freg


Campos → Campo CamposRec
	Campos.desh=0
	CamposRec.desh=Campo.tam
	Campos.tam = Campo.tam + CamposRec.tam

CamposRec → ';' Campo CamposRec
	Campo.desh=CamposRec0.desh
	CamposRec1.desh = Campo.tam + CamposRec0.desh
	CamposRec0.tam = Campo.tam + CamposRec1.tam

CamposRec → λ
	CamposRec.tam = 0

Campo → iden: Tipo
DecProc → proc iden FParams Bloque fproc



**************************************************POR HACER***************************************
LAParametros → Expresion LAParametrosRec
LAParametrosRec → ',' Expresion LAParametrosRec
LAParametrosRec → λ

LAParams ::= LAParams, Exp
    LAParams0.cod   = 
        LAParams1.cod ||
        copia ||
        direccionParFormal(LAParams0.fparams[LAParams0.nparams]) ||
        Exp.cod ||
        pasoParametro(Exp.modo,LAParams0.fparams[LAParams0.nparams])
    LAParams1.etqh  = LAParams0.etqh
    Exp.etqh        = LAParams1.etq + 1 + longDireccionParFormal
    LAParams0.etq   = Exp.etq + longPasoParametro
    Exp.parh        = LAParams0.fparamsh[LAParams0.nparams].modo == var

LAParams ::= Exp
    LAParams.cod    = 
        copia ||
        Exp.cod ||
        pasoParametro(Exp.modo,LAParams.fparams[1])
    Exp.etqh        = LAParams.etq + 1
    LAParams.etq    = Exp.etq + longPasoParametro
    Exp.parh        = LAParams.fparamsh[1].modo == var

******************************************************************************************************************


FParams → ( LFParams )    
FParams → λ


LFParams -> FParam LFParamsRec
	
	LFParamsRec.tsh = añadeID(LFParams.tsh,FParam.id, FParam.props ++ <dir:0>
	LFParamsRec.dirh = FParam.tam.
	LFParams.ts = LFParamsRec.ts
	LFParams.dir = LFParamsRec.dir

LFParamsRec -> FParam , LFParamsRec
	FParam.dirh = LFParamsRec0.dirh
	LFParamsRec1.dirh = LFParamsRec0.dirh + FParam.tam
	LFParamsRec1.tsh = añadeID(LFParams0,tsh, FParam.id, FParam.props ++ <dir:LFParamsRec0.dirh>)
	LFParamsRec0.ts = LFParamsRec1.ts
LFParamsRec -> λ
	LFParamsRec.dir = LFParamsRec.dirh
	LFParamsRec.ts = LFParamsRec.tsh



FParam → var iden: Tipo    
FParam → id: Tipo
Bloque → DecsBloque && I
Bloque → I


DecsBloque -> Dec DecsBloqueRec
	Dec.dirh = DecsBloque.dirh
	DecsBloqueRec.dirh = DecsBloque.dirh + Dec.tam
	DecsBloque.dir = DecsBloqueRec.dir

DecsBloqueRec -> ; Dec DecsBloqueRec
	Dec.dirh = DecsBloqueRec0.dirh
	DecsBloqueRec1.dirh = DecsBloqueRec0.dirh + Dec.tam
	DecsBloqueRec0.dir = DecsBloqueRec1.dir
DecsBloqueRec -> λ
	DecsBloqueRec.dir = DecsBloqueRec.dirh


Is -> I IsFact
	I.etqh = Is.etqh
	IsFact.etqh = I.etq
	Is.etq = IsFact.etq
	Is.cod = I.cod || IsFact.cod
IsFact -> ; Is
	Is.etqh = IsFact.etqh
	IsFact.etq = Is.etq
	IsFact.cod = Is.cod

IsFact -> λ
	IsFact.etq = IsFact.etqh
	IsFact.cod = {}



I → InsAsignación
I → InsLectura
I → InsEscritura
I → InsCompuesta
I → InsIf
I → InsWhile
I → InsFor
I → InsNew
I → InsDis
I → ICall
InsLectura → in(id)
InsEscritura → out(Exp)
InsAsignación → Mem := Exp
InsCompuesta → { Is }
InsIf → if Exp then I Pelse
PElse → else I
PElse → λ
InsWhile → while Exp do I
InsFor → for id=Exp to Exp do I
INew → new Mem
IDel → delete Mem
ICall → iden AParams
AParams → LAparams
AParams → λ
    

Mem → id MemRec
	MemRec.etqh = logAcessoVar(Mem.tsh[id.lex]) + MemRec.etq
	Mem.cod = accesoVar(Mem.tsh[id.lex]) || MemRec.cod
	Mem.etq = MemRec.etq
MemRec → ^ MemRec
	MemRec1.etqh = MemRec0.etqh + 
	MemRec0.cod = apila-ind || MemRec1.cod
	MemRec0.etq = MemRec1.etq
MemRec → [Expresion] MemRec
	Expresion.etq = MemRec0.etqh
	MemRec1.etqh = Expresion.etq + 3
	MemRec0.cod = Exp.cod || apila Mem1.tipo.tbase.tam || multiplica || suma || MemRec1.cod
	MemRec0.etq = MemRec1.etq
MemRec → .id MemRec
	MemRec1.etqh = MemRec0.etqh + 2
	MemRec0.etq = MemRec1.etq
	MemRec0.cod = apila(MemRec0.tipo.campos[id.lex].desp || suma || MemRec1.cod
MemRec → λ
	MemRec.etq = MemRec.etqh
	MemRec.cod = {}


Expresion -> ExpresionNiv1 ExpresionFact

	ExpresionNiv1.etqh = Expresion.etqh
	ExpresionNiv1.parh = Expresion.parh <--(cuidado debería ser false si ExpresionFact no es nula, pero cómo saber?)
	ExpresionFact.etqh = ExpresionNiv1.etq <--(estaba Expresion.etqh)
	ExpresionFact.codh = ExpresionNiv1.cod
	ExpresionFact.tipoh = ExpresionNiv1.tipo
	ExpresionFact.modoh = ExpresionNiv1.modo
	Expresion.cod = ExpresionFact.cod

ExpresionFact-> OpNiv0 ExpresionNiv1
	ExpresionNiv1.parh= false
	ExpresionNiv1.etqh = ExpresionFact.etqh
	ExpresionFact.modo = val
	ExpresionFact.cod =
		apilarTiposIgualados(ExpresionFact.codh,ExpresionFact.tipoh,ExpresionNiv1.cod,ExpresionNiv1.tipo) ||
		case (OpNiv0)
			menor: menor
			mayor: mayor
			menor-ig: menorIg
			mayor-ig: mayorIg
			igual : igual
			no-igual: no-igual
	ExpresionFact.etq = ExpresionNiv1.etq + 1

ExpresionFact -> λ
	ExpresionFact.cod = ExpresionFact.codh
	ExpresionFact.modo = ExpresionFact.modoh
	ExpresionFact.tipo = ExpresionFact.tipoh
	ExpresionFact.etq = ExpresionFact.etqh


ExpresionNiv1 -> ExpresionNiv2 ExpresionNiv1Rec
	ExpresionNiv2.etqh = ExpresionNiv1.etqh
	ExpresionNiv2.parh = ExpresionNiv1.parh (deberia ser false si ExprNiv1Rec no es vacio, cómo saber?)
	ExpresionNiv1Rec.etqh = ExpresionNiv2.etq
	ExpresionNiv1Rec.modoh = ExpresionNiv2.modo
 	ExpresionNiv1Rec.codh = ExpresionNiv2.cod
	ExpresionNiv1Rec.tipoh = ExpresionNiv2.tipo


	ExpresionNiv1.cod = ExpresionNiv1Rec.cod
	ExpresionNiv1.etq = ExpresionNiv1Rec.etq
	ExpresionNiv1.modo = ExpresionNiv1Rec.modo
ExpresionNiv1Rec -> OpNiv1 ExpresionNiv2 ExpresionNiv1Rec
	ExpresionNiv2.parh = false
	ExpresionNiv1Rec1.modoh = val	
	ExpresionNiv1Rec1.tipoh = ExpresionNiv2.tipo
	if (opNiv1.op == or):
		ExpresionNiv2.etqh = ExpresionNiv1Rec0.etqh + 3
		ExpresionNiv1Rec1.codh =
			ExpresionNiv1Rec0.codh ||
			dup ||
			ir-v (ExpresionNiv2.etq) ||
			desapila ||
			ExpresionNiv2.cod
		ExpresionNiv1Rec1.etqh = ExpresionNiv2.etq

	else:
		ExpresionNiv2.etqh = ExpresionNiv1Rec0.etqh
		ExpresionNiv1Rec1.etqh = ExpresionNiv2.etq + 1
		ExpresionNiv1Rec1.codh = 
			ExpresionNiv1Rec0.codh ||
			ExpresionNiv2.tipo) ||
			case (OpNiv1.op)
				suma: sumar
				resta: restar
		
	ExpresionNiv1Rec0.etq = ExpresionNiv1Rec.etq
	ExpresionNiv1Rec0.cod = ExpresionNiv1Rec1.cod
	ExpresionNiv1Rec0.modo = ExpresionNiv1Rec1.modo

ExpresionNiv1Rec ->  λ
	ExpresionNiv1Rec.etq = ExpresionNiv1Rec.etqh
	ExpresionNiv1Rec.cod = ExpresionNiv1Rec.codh
	ExpresionNiv1Rec.modo = ExpresionNiv1Rec.modoh

*****************************************************************************************************+

ExpresionNiv2 -> ExpresionNiv3 ExpresionNiv2Rec
	ExpresionNiv3.etqh = ExpresionNiv2.etqh
	ExpresionNiv3.parh = ExpresionNiv2.parh
	ExpresionNiv2Rec.etqh = ExpresionNiv3.etq
	ExpresionNiv2Rec.codh = ExpresionNiv3.cod
	ExpresionNiv2Rec.tipoh = ExpresionNiv3.tipo
	ExpresionNiv2Rec.modoh = ExpresionNiv3.modo

	ExpresionNiv2.cod = ExpresionNiv2Rec.cod
	ExpresionNiv2.modo = ExpresionNiv2Rec.modo
	ExpresionNiv2.etq = ExpresionNiv2Rec.etq

ExpresionNiv2Rec -> OpNiv2 ExpresionNiv3 ExpresionNiv2Rec
	

	ExpresionNiv2Rec1.modoh= val
	ExpresionNiv2Rec1.tipoh = ExpresionNiv3.tipo
	if (OpNiv2.op == and)
		ExpresionNiv2Rec1.cod = 
			ExpresionNiv2Rec0.codh ||
			ir-f(ExpresionNiv3.etq + 1) ||
			ExpresionNiv3.cod ||
			ir-a(ExpresionNiv3.etq + 2) ||
			apila(0)
		ExpresionNiv3.etqh = ExpresionNiv2Rec0.etqh + 1
		ExpresionNiv2Rec1.etqh = ExpresionNiv3.etq + 2

	else:
		ExpresionNiv2Rec1.cod = 
			ExpresionNiv2Rec0.codh ||
			ExpresionNiv3.cod ||
			case (OpNiv2.op)
				Multiplica: mul
				Divide: div
				Modulo: Mod
		ExpresionNiv3.etqh = ExpresionNiv2Rec0.etqh
		ExpresionNiv3Rec1.etqh = ExpresionNiv3.etq + 1

	ExpresionNiv2Rec0.cod = ExpresionNiv2Rec1.cod
	ExpresionNiv2Rec0.modo = ExpresionNiv2Rec1.modo
	ExpresionNiv2Rec0.etq = ExpresionNiv2Rec1.etq

ExpresionNiv2Rec -> λ
	ExpresionNiv2Rec.modo = ExpresionNiv2Rec.modoh
	ExpresionNiv2Rec.cod = ExpresionNiv2Rec.codh
	ExpresionNiv2Rec.etq = ExpresionNiv2Rec.etqh
    


ExpresionNiv3 -> ExpresionNiv4 ExpresionNiv3Fact
	ExpresionNiv4.etqh = ExpresionNiv3.etqh
	ExpresionNiv4.parh = ExpresionNiv3.h (!!!debería ser false si ExpresionNiv3Fact no es vacio, pero no se sabe)
	ExpresionNiv3Fact.codh = ExpresionNiv4.cod
	Expresionniv3Fact.etqh = ExpresionNiv4.etq
	ExpresionNiv3Fact.modoh = ExpresionNiv4.modo

	ExpresionNiv3.etq = ExpresionNiv3Fact.etq
	ExpresionNiv3.cod = ExpresionNiv3Fact.cod

ExpresionNiv3Fact -> OpNiv3 ExpresionNiv3
	ExpresionNiv3.etqh = ExpresionNiv3Fact.etqh
	ExpresionNiv3.parh = false
	ExpresionNiv3Fact.cod =
		case (OpNiv3.op)
			shl: ExpresionNiv3Fact.codh || ExpresionNiv3.cod || shl
			shr: ExpresionNiv3Fact.codh || ExpresionNiv3.cod || shr
	ExpresionNiv3Fact.modo=val
	ExpresionNiv3Fact.etq = ExpresionNiv3.etq + 1
	
ExpresionNiv3Fact -> λ
	ExpresionNiv3Fact.modo = ExpresionNiv3Fact.modoh
	ExpresionNiv3Fact.cod = {}
	ExpresionNiv3Fact.etq = ExpresionNiv3Fact.etqh


ExpNiv4 → OpNiv4 ExpNiv4
ExpNiv4 → | Exp |
ExpNiv4 → ( Exp )
ExpNiv4 → Literal
ExpNiv4 → Mem
Literal → litNat
Literal → litFlo
Literal → litTrue
Literal → litFalse
Literal → litCha