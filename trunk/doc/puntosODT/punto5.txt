Programa → Declaraciones & Instrucciones
    Programa.cod  =
        inicio(Decs.n,Decs.dir) ||
        ir-a(Decs.etq)          ||
        Decs.cod                ||
        Instrucciones.cod       ||
        stop
    Declaraciones.etqh      = longInicio + 1
    Instrucciones.etqh      = Declaraciones.etq
    Declaraciones.dirh      = 0
    Declaraciones.nh        = 0

Declaraciones → Declaraciones ; Declaracion
    Declaraciones0.ts       = añadeID(Declaraciones1.ts,Declaracion.id,Declaracion.props ⊗ Declaracion.propsop)
    Declaraciones1.dirh     = Declaraciones0.dirh
    Declaraciones0.dir      = Declaraciones1.dir + Declaracion.tam
    Declaracion.dirh        = Declaraciones1.dir
    Declaraciones1.nh       = Declaraciones0.nh
    Declaraciones0.n        = max(Declaraciones1.n,Declaracion.n)
    Declaraciones1.etqh     = Declaraciones0.etqh
    Declaracion.etqh        = Declaraciones1.etq
    Declaraciones0.etq      = Declaracion.etq
    Declaraciones0.cod      = Declaraciones1.cod || Declaracion.cod

Declaraciones → Declaracion
    Declaraciones.ts        = añadeID(creaTS(),Declaracion.id,Declaracion.props ⊗ Declaracion.propsop)
    Declaraciones.dir       = Declaraciones.dirh + Declaracion.tam
    Declaracion.dirh        = Declaraciones.dirh
    Declaracion.nh          = Declaraciones.nh
    Declaraciones.n         = Declaracion.n
    Declaracion.etqh        = Declaraciones.etqh
    Declaraciones.etq       = Declaracion.etq
    Declaraciones.cod       = Declaracion.cod


Declaracion → DecTipo
    Declaracion.propsop     = <>
    Declaracion.tam         = 0
    Declaracion.n           = Declaracion.nh
    Declaracion.cod         = λ
    Declaracion.etq         = Declaracion.etqh

Declaracion → DecVar
    DecVar.propsop          = <dir:Declaracion.dirh>
    Declaracion.tam         = DecVar.props.tipo.tam
    Declaracion.n           = Declaracion.nh
    Declaracion.cod         = λ
    Declaracion.etq         = Declaracion.etqh

Declaracion → DeclaracionProcedimiento
    Declaracion.tam                 = 0
    DeclaracionProcedimiento.nh     = Declaracion.nh
    Declaracion.n                   = DeclaracionProcedimiento.n
    DeclaracionProcedimiento.etqh   = Declaracion.etqh
    Declaracion.etq                 = DeclaracionProcedimiento.etq
    Declaracion.cod                 = DeclaracionProcedimiento.cod
    Declaracion.propsop             = DeclaracionProcedimiento.propsop


Tipo → Boolean
    Tipo.tipo = <t:boolean,tam:1>

Tipo → Character
    Tipo.tipo = <t:character,tam:1>

Tipo → Float
    Tipo.tipo = <t:float,tam:1>

Tipo → Natural
    Tipo.tipo = <t:natural,tam:1>

Tipo → Integer
    Tipo.tipo = <t:integer,tam:1>

Tipo → iden
    Tipo.tipo =
        <
            t:ref,
            id:iden.lex,
            tam:Tipo.tsh[iden.lex].tipo.tam
        >

Tipo → array [num] of Tipo
    Tipo.tipo =
        <
            t:array,
            nelems:valorDe(num.lex),
            tbase:Tipo.tipo,
            tam:valorDe(num.lex)*Tipo1.tipo.tam
        >

Tipo → ^Tipo
    Tipo0.tipo =
        <
            t:puntero,
            tbase:Tipo1.tipo,
            tam:1
        >

Tipo → reg Campos freg
    Tipo.tipo =
        <
            t:array,
            campos:Campos.campos,
            tam:Campos.tam
        >


Campos → Campos ; Campo
    Campos0.tam = Campos1.tam + Campo.tam
    Campo.desh  = Campos1.tam

Campos → Campo
    Campos.tam = Campo.tam
    Campo.desh = 0


Campo → iden: Tipo
    Campo.campo =
        <
            id:iden.lex,
            tipo:Tipo.tipo,
            desp:Campo.desph
        >
    Campo.tam   = Tipo.tam

DeclaracionProcedimiento → proc iden FParametros Bloque fproc
    Bloque.dirh                      = FParametros.dir
    FParametros.nh                   = Bloque.nh = DeclaracionProcedimiento.nh + 1
    DeclaracionProcedimiento.n       = Bloque.n
    DeclaracionProcedimiento.cod     = Bloque.cod
    DeclaracionProcedimiento.propsop = <inicio:Bloque.inicio>
    Bloque.etqh                      = DeclaracionProcedimiento.etqh
    DeclaracionProcedimiento.etq     = Bloque.etq
    Bloque.tsph                      =
        añadeID(
            FParametros.ts,
            DecProp.id,
            DeclaracionProcedimiento.props⊗{nivel:DecsProp.nh+1}⊗DeclaracionProcedimiento.propsop
        )


LAParametros ::= LAParametros, Expresion
    LAParametros0.cod   =
        LAParametros1.cod ||
        copia ||
        direccionParFormal(LAParametros0.fParametros[LAParametros0.nParametros]) ||
        Expresion.cod ||
        pasoParametro(Expresion.modo,LAParametros0.fParametros[LAParametros0.nParametros])
    LAParametros1.etqh  = LAParametros0.etqh
    Expresion.etqh  = LAParametros1.etq + 1 + longDireccionParFormal
    LAParametros0.etq   = Expresion.etq + longPasoParametro
    Expresion.parh  = LAParametros0.fParametrosh[LAParametros0.nParametros].modo == var

LAParametros ::= Expresion
    LAParametros.cod    =
        copia ||
        Expresion.cod ||
        pasoParametro(Expresion.modo,LAParametros.fParametros[1])
    Expresion.etqh  = LAParametros.etq + 1
    LAParametros.etq    = Expresion.etq + longPasoParametro
    Expresion.parh  = LAParametros.fParametrosh[1].modo == var


FParametros → ( LFParametros )
    FParametros.dir = LFParametros.dir

FParametros → λ
    FParametros.dir = 0


LFParametros → LFParametros, FParametro
    LFParametros0.ts    = añadeID(LFParametros1.ts,FParametro.id,
                           FParametro.props ⊗ <dir:LFParametros1.dir>)
    LFParametros0.dir   = LFParametros1.dir + FParametro.tam
    FParametro.dirh     = LFParametros1.dir

LFParametro → FParametro
    LFParametro.ts      = añadeID(LFParametro.tsph, FParametro.id,FParametro.props ⊗ <dir:0>)
    LFParametro.dir     = FParametro.tam
    FParametro.dirh     = 0


FParametro → var Tipo id
    FParametro.tam      = 1
    FParametro.param    = <modo: variable, tipo: Tipo.tipo, dir: FParametro.dirh>

FParametro → Tipo id
    FParametro.tam      = Tipo.tipo.tam
    FParametro.param    = <modo: valor, tipo: Tipo.tipo, dir: FParametro.dirh>


Bloque → Decs && Ins
    Decs.dirh       = Bloque.dirh
    Decs.nh         = Bloque.nh
    Bloque.n        = Decs.n
    Decs.etqh       = Bloque.etqh
    Bloque.inicio   = Decs.etq
    Ins.etqh        = Decs.etq + longPrologo
    Bloque.etq      = Ins.etq + longEpilogo + 1
    Bloque.cod      =
            Decs.cod                    ||
            prologo(Bloque.nh,Decs.dir) ||
            Ins.cod                     ||
            epilogo(Bloque.nh)          ||
            ir-ind


Bloque → Ins
    Bloque.n        = Bloque.nh
    Bloque.cod      =
        prologo(Bloque.nh,Bloque.dirh)  ||
        Ins.cod                         ||
        epilogo(Bloque.nh)              ||
        ir-ind
    Ins.etqh        = Bloque.etqh + longPrologo
    Bloque.inicio   = Bloque.etqh
    Bloque.etq      = Ins.etq + longEpilogo + 1

Instrucciones → Instruccion ; Instrucciones
    Instrucciones0.cod    = Instruccion.cod || Instrucciones1.cod
    Instruccion1.etqh     = Instrucciones0.etqh
    Instrucciones.etqh    = Instruccion1.etq
    Instrucciones0.etq    = Instruccion.etq

Instrucciones → Instruccion
    Instrucciones.cod   = Instruccion.cod
    Instruccion.etqh    = Instrucciones.etqh
    Instrucciones.etq   = Instruccion.etq


Instruccion → InsAsignacion
    Instrucciones.cod       = InstruccionAsignacion.cod
    InsAsignacion.etqh      = Instruccion.etzqh
    Instruccion.etq         = InstruccionAsignacion.etq

Instruccion → InsLectura
    Instruccion.cod         = InsLectura.cod
    InsLectura.etqh         = Instruccion.etqh
    Instruccion.etq         = InsLectura.etq

Instruccion → InsEscritura
    Instruccion.cod         = InsEscritura.cod
    InsEscritura.etqh       = Instruccion.etqh
    Instruccion.etq         = InsEscritura.etq

Instruccion → InsCompuesta
    Instruccion.cod         = InsCompuesta.cod
    InsCompuesta.etqh       = Instruccion.etqh
    Instruccion.etq         = InsCompuesta.etq

Instruccion → InsIf
    Instruccion.cod         = InsIf.cod
    InsIf.etqh              = Instruccion.etqh
    Instruccion.etq         = InsIf.etq

Instruccion → InsWhile
    Instruccion.cod         = InsWhile.cod
    InsWhile.etqh           = Instruccion.etqh
    Instruccion.etq         = InsWhile.etq

Instruccion → InsFor
    Instruccion.cod         = InsFor.cod
    InsFor.etqh             = Instruccion.etqh
    Instruccion.etq         = InsFor.etq

Instruccion → InsNew
    Instruccion.cod         = InsNew.cod
    InsNew.etqh             = Instruccion.etqh
    Instruccion.etq         = InsNew.etq

Instruccion → InsDis
    Instruccion.cod         = InsDis.cod
    InsDis.etqh             = Instruccion.etqh
    Instruccion.etq         = InsDis.etq

Instruccion → InsProcedimiento
    InsProcedimiento.etqh   = Instruccion.etqh
    Instruccion.etq         = InsProcedimiento.etq
    Instruccion.cod         = InsProcedimiento.cod

InsLectura → in(id)
    InsLectura.cod  = in InsLectura.tsh[id.lex].dir
    InsLectura.etq  = InsLectura.etqh + 1


InsEscritura → out(Expresion)
    InsEscritura.cod   = Expresion.cod || out
    Expresion.etqh           = InsEscritura.etqh
    InsEscritura.etq   = Expresion.etq + 1
    Expresion.parh           = false


InsAsignación → Mem := Expresion
    InsAsignación.cod =
        si esCompatibleConTipoBasico(Mem.tipo,Expresion.tsh)
            Mem.cod || Expresion.cod || desapila-ind
        si no
            Mem.cod || Expresion.cod || mueve(Mem.tipo.tam)
    Mem.etqh          = InsAsignación.etqh
    Expresion.etqh          = Mem.etq
    InsAsignación.etq = Expresion.etq + 1
    Expresion.parh          = false


InsCompuesta → { Is }
    InsCompuesta.cod    = Is.cod
    Is.etqh             = InsCompuesta.etqh
    InsCompuesta.etq    = Is.etq


InsIf → if Expresion then Instruccion Pelse
    InsIf.cod           =
        Expresion.cod || ir-f(Instruccion.etq + 1) || Instruccion.cod || ir-a(PElse.etq) || PElse.cod
    Expresion.etqh      = InsIf.etqh
    Instruccion.etqh    = Expresion.etq + 1
    PElse.etqh          = Instruccion.etq + 1
    InsIf.etq           = PElse.etq
    Expresion.parh      = false


PElse → else Instruccion
    PElse.cod           = Instruccion.cod
    PElse.etq           = Instruccion.etq
    Instruccion.etqh    = PElse.etqh

PElse → λ
    PElse.cod  = λ
    PElse.etq  = PElse.etqh


InsWhile → while Expresion do Instruccion
    InsWhile.cod        =
        Expresion.cod               ||
        ir-f(Instruccion.etq + 1)   ||
        Instruccion.cod             ||
        ir-a(InsWhile.etqh)
    Expresion.etqh      = InsWhile.etqh
    Instruccion.etqh    = Expresion.etq + 1
    InsWhile.etq        = Instruccion.etq + 1


InsFor → for id=Expresion to Expresion do Instruccion
    InsFor.cod  =
        Expresion0.cod                      ||
        desapila-dir InsFor.tsh[id.lex].dir ||
        Expresion1.cod                      ||
        dup                                 ||
        apila-dir InsFor.tsh[id.lex].dir    ||
        igual                               ||
        ir-v( InsFor.etq - 1)               ||
        Instruccion.cod                     ||
        apila-dir InsFor.tsh[id.lex].dir    ||
        apilar 1                            ||
        sumar                               ||
        desapila-dir InsFor.tsh[id.lex].dir ||
        ir-a (Expresion1.etq)
        pop
    Expresion0.etqh   = InsFor.etqh
    Expresion1.etqh   = Expresion0.etq + 1
    Instruccion.etqh  = Expresion1.etq + 4
    InsFor.etq        = Instruccion.etq + 6


InsNew → new Mem
    InsNew.cod  =
        Mem.cod ||
        new(
            si Mem.tipo.tbase = ref
                InsNew.tsh[Mem.tipo.tbase.id].tam
            si no
                1
        )
        || desapila-ind
    Mem.etqh    = InsNew.etqh
    InsNew.etq  = Mem.etq + 2


InsDis → delete Mem
    InsDis.cod  =
        Mem.cod ||
        del(
            si Mem.tipo.tbase = ref
                InsDis.tsh[Mem.tipo.tbase.id].tam
            si no
                1
        )
    Mem.etqh    = InsDis.etqh
    InsDis.etq  = Mem.etq + 1


InsProcedimiento → iden AParametros
    InsProcedimiento.cod    =
        apila-ret(InsProcedimiento.etq)         ||
        AParametros.cod                         ||
        ir-a(InsProcedimiento.tsh[iden.lex].inicio)
    AParametros.etqh            = InsProcedimiento.etqh + longApilaRet
    InsProcedimiento.etq    = AParametros.etq + 1


AParametros → LAParametros
    AParametros.cod     = inicio-paso || LAParametros.cod || fin-paso
    LAParametros.etqh   = AParametros.etqh + longInicioPaso
    AParametros.etq     = LAParametros.etq + longFinPaso

AParametros → λ
    AParametros.cod     = λ
    AParametros.etq     = AParametros.etqh

Mem → id
    Mem.cod    = accesoVar(Mem.tsh[id.lex])
    Mem.etq    = Mem.etqh + longAccesoVar(Mem.tsh[id.lex])

Mem → Mem->
    Mem0.cod   = Mem1.cod || apila-ind
    Mem1.etqh  = Mem0.etqh
    Mem0.etq   = Mem1.etq + 1

Mem → Mem[Expresion]
    Mem0.cod        =
        Mem1.cod || Expresion.cod || apila Mem1.tipo.tbase.tam || multiplica || suma
    Mem1.etqh       = Mem0.etqh
    Expresion.etqh  = Mem1.etq
    Mem0.etq        = Expresion.etq + 3

Mem → Mem.id
    Mem0.cod   = Mem1.cod || apila(Mem1.tipo.campos[iden.lex].desp) || suma
    Mem1.etqh  = Mem0.etqh
    Mem0.etq   = Mem1.etq + 2

Expresion → ExpresionNivel1 OpNiv0 ExpresionNivel1
    Expresion.cod         =
        ExpresionNivel10.cod ||
        ExpresionNivel11.cod ||
        case (OpNiv0.op)
            menor:
                menor
            mayor
                mayor
            menor-ig
                menorIg
            mayor-ig
                mayorIg
            igual
                igual
            no-igual
                no-igual
    ExpresionNivel10.etqh   = Expresion.etqh
    ExpresionNivel11.etqh   = ExpresionNivel10.etqh
    Expresion.etq           = ExpresionNivel11.etq +1
    Expresion.modo          = val
    ExpresionNivel10.parh   = ExpresionNivel11.parh = false

Expresion → ExpresionNivel1
    Expresion.cod           = ExpresionNivel1.cod
    ExpresionNivel1.etqh    = Expresion.etqh
    Expresion.etq           = ExpresionNivel1.etq
    Expresion.modo          = ExpresionNivel1.modo
    ExpresionNivel1.parh    = Expresion.parh

ExpresionNiv1 → ExpresionNiv1 or ExpresionNiv2
    ExpresionNiv10.cod  =
        ExpresionNiv11.cod ||
        dup ||
        ir-v(ExpresionNiv2.etqP) ||
        desapila ||
        ExpresionNiv2.cod
    ExpresionNiv11.etqh = ExpresionNiv10.etqh
    ExpresionNiv2.etqh  = ExpresionNiv11.etq + 3
    ExpresionNiv10.etq  = ExpresionNiv2.etq
    ExpresionNiv1.modo  = val
    ExpresionNiv11.parh = ExpresionNiv2.parh = false

ExpresionNiv1 → ExpresionNiv1 OpNiv1 ExpresionNiv2
    ExpresionNiv10.cod =
        ExpresionNiv11.cod ||
        ExpresionNiv2.cod ||
        case (OpNiv1.op)
            suma:
                sumar
            resta:
                restar
    ExpresionNiv11.etqh = ExpresionNiv10.etqh
    ExpresionNiv2.etqh  = ExpresionNiv11.etq
    ExpresionNiv10.etq  = ExpresionNiv2.etq + 1
    ExpresionNiv1.modo  = val
    ExpresionNiv11.parh = ExpresionNiv2.parh = false

ExpresionNiv1 → ExpresionNiv2
    ExpresionNiv1.cod  = ExpresionNiv2.cod
    ExpresionNiv2.etqh = ExpresionNiv1.etqh
    ExpresionNiv1.etq  = ExpresionNiv2.etq
    ExpresionNiv1.modo = ExpresionNiv2.modo
    ExpresionNiv2.parh = ExpresionNiv1.parh

ExpresionNiv2 ::= ExpresionNiv2 and ExpresionNiv3
    ExpresionNiv20.cod    =
        ExpresionNiv21.cod ||
        ir-f(ExpresionNiv2.etq + 1) ||
        ExpresionNiv2.cod ||
        ir-a(ExpresionNiv2.etq + 2) ||
        apila(0)
    ExpresionNiv21.etqh   = ExpresionNiv20.etqh
    ExpresionNiv2.etqh       = ExpresionNiv21.etq + 1
    ExpresionNiv20.etq    = ExpresionNiv2.etq + 2
    ExpresionNiv20.modo   = val
    ExpresionNiv21.parh   = ExpresionNiv3.parh = false

ExpresionNiv2 → ExpresionNiv2 OpNiv2 ExpresionNiv3
    ExpresionNiv20.cod    =
        case(OpNiv2.op)
            Multiplica:
                ExpresionNiv21.cod ||
                ExpresionNiv3.cod  ||
                Mul
            Divide:
                ExpresionNiv21.cod ||
                ExpresionNiv3.cod  ||
                Div
            Modulo:
                ExpresionNiv21.cod ||
                ExpresionNiv3.cod  ||
                Mod
            y:
                ExpresionNiv21.cod ||
                ExpresionNiv3.cod  ||
                Y
    ExpresionNiv21.etqh   = ExpresionNiv20.etqh
    ExpresionNiv3.etqh    = ExpresionNiv21.etq
    ExpresionNiv20.etq    = ExpresionNiv3.etq +1
    ExpresionNiv20.modo   = val
    ExpresionNiv21.parh   = ExpresionNiv3.parh = false

ExpresionNiv2 → ExpresionNiv3
    ExpresionNiv3.etqh    = ExpresionNiv2.etqh
    ExpresionNiv2.etq     = ExpresionNiv3.etq
    ExpresionNiv2.cod     = ExNiv3.cod
    ExpresionNiv20.modo   = ExpresionNiv3.modo
    ExpresionNiv3.parh    = ExpresionNiv2.parh;

ExpresionNiv3 → ExpresionNiv4 OpNiv3 ExpresionNiv3
    ExpresionNiv30.cod  =
        case (OpNiv3.op)
            shl:
                ExpresionNiv4.cod || ExpresionNiv31.cod || shl
            shr:
                ExpresionNiv4.cod || ExpresionNiv31.cod || shr
    ExpresionNiv30.modo = val
    ExpresionNiv4.etqh  = ExpresionNiv30.etqh
    ExpresionNiv31.etqh = ExpresionNiv4.etq
    ExpresionNiv30.etqh = ExpresionNiv31.etq + 1
    ExpresionNiv4.parh  = ExpresionNiv31.parh = false

ExpresionNiv3 → ExpresionNiv4
    ExpresionNiv4.etqh = ExpresionNiv3.etqh
    ExpresionNiv3.etq  = ExpresionNiv4.etq
    ExpresionNiv3.cod  = ExpresionNiv4.cod
    ExpresionNiv3.modo = ExpresionNiv4.modo
    ExpresionNiv4.parh = ExpresionNiv3.parh

ExpresionNiv4 → OpNiv4 ExpresionNiv4
    ExpresionNiv40.cod =
        case (OpNiv4.op)
            no:
                ExpresionNiv41.cod || no
            negativo:
                ExpresionNiv41.cod || negativo
            cast-float:
                ExpresionNiv41.cod || CastFloat
            cast-int:
                ExpresionNiv41.cod || CastInt
            cast-nat:
                ExpresionNiv41.cod || CastNat
            cast-char:
                ExpresionNiv41.cod || CastChar
    ExpresionNiv40.modo = val
    ExpresionNiv41.etqh = ExpresionNiv4.etqh
    ExpresionNiv40.etq  = ExpresionNiv41.etq + 1
    ExpresionNiv41.parh = false

ExpresionNiv4 → | Expresion |
    ExpresionNiv4.cod  = Expresion.cod || abs
    ExpresionNiv4.modo = Expresion.val
    Expresion.etqh     = ExpresionNiv4.etqh
    ExpresionNiv4.etq  = Expresion.etq
    Expresion.parh     = false

ExpresionNiv4 → ( Expresion )
    ExpresionNiv4.cod  = Expresion.cod
    ExpresionNiv4.modo = Expresion.modo
    Expresion.etqh     = ExpresionNiv4.etqh
    ExpresionNiv4.etq  = Expresion.etq
    Expresion.parh     = ExpresionNiv4.parh

ExpresionNiv4 → Literal
    ExpresionNiv4.cod  = Literal.cod
    ExpresionNiv4.modo = var
    Literal.etqh = ExpresionNiv4.etqh
    ExpresionNiv4.etq  = Literal.etq

ExpresionNiv4 → Mem
    ExpresionNiv4.cod    =
        si esCompatibleConTipoBasico(Mem.tipo,ExpresionNiv4.tsh) /\ not ExpresionNiv4.parh
            Mem.cod || apila-ind
        si no
            Mem.cod
    Mem.etqh        = ExpresionNiv4.etqh
    ExpresionNiv4.etq     =
        si esCompatibleConTipoBasico(Mem.tipo,ExpresionNiv4.tsh) /\ not ExpresionNiv4.parh
            Mem.etq + 1
        si no
            Mem.etq
    ExpresionNiv4.modo    = var


Literal → litNat
    Literal.cod = apila LitNat.lex
    Literal.etq = Literal.etqh + 1
    
Literal → litFlo
    Literal.cod = apila litFlo.lex
    Literal.etq = Literal.etqh + 1
    
Literal → litTrue
    Literal.cod = apila true
    Literal.etq = Literal.etqh + 1
    
Literal → litFalse
    Literal.cod = apila false
    Literal.etq = Literal.etqh + 1
    
Literal → litCha
    Literal.cod = apila litCha.lex
    Literal.etq = Literal.etqh + 1
    
